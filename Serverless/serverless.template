{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",

  "Parameters": {

    "GameName" : {
      "Type": "String", "MinLength": "2"
    },

    "S3GameServerBucket": {
      "Type": "String", "MinLength": "0"
    },

    "GameServerVersion": {
      "Type": "String",
      "AllowedPattern": "(\\d+).(\\d+).(\\d+)"
    },

    "DeployGameServers": {
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Default": "true"
    }
  },

  "Conditions":
  {
    "DeployGameServersCond": {"Fn::Equals": [{"Ref": "DeployGameServers"}, "true"]}
  },

  "Resources": {

    "IdentityPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": {"Fn::Sub": "${GameName}-identity-pool"},
        "AllowUnauthenticatedIdentities": false,
        "CognitoIdentityProviders": [
        {
          "ClientId": {"Ref": "UserPoolClient"},
          "ProviderName": {"Fn::GetAtt": ["CognitoUserPool", "ProviderName"]}
        }]
      }
    },

    "UserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": {"Fn::Sub": "Sub ${GameName}-user-pool-client"},
        "GenerateSecret": false,
        "UserPoolId": {"Ref": "CognitoUserPool"}
      }
    },

    "CognitoUserPool": {
      "Type" : "AWS::Cognito::UserPool",
      "Properties" : {
        "UserPoolName" : {"Fn::Sub":"${GameName}-user-pool"},
        "UsernameAttributes" : ["email"],
        "UsernameConfiguration" : {"CaseSensitive" : false},
        "AutoVerifiedAttributes" : ["email"],
        "DeviceConfiguration" : {"DeviceOnlyRememberedOnUserPrompt" : true},
        "VerificationMessageTemplate" : {
          "DefaultEmailOption" : "CONFIRM_WITH_LINK",
          "EmailMessageByLink" : "Please click the link below to verify your account {##Verify Email##}. Have a nice day!",
          "EmailSubjectByLink" : {"Fn::Sub":"${GameName} account activation."}
        },
        "AccountRecoverySetting" : {
          "RecoveryMechanisms" : [
          {
            "Priority": 1,
            "Name": "verified_email"
          }]
        },
        "AdminCreateUserConfig" : {
          "AllowAdminCreateUserOnly" : false,
          "InviteMessageTemplate" : {
            "EmailMessage" : "You user account has been created. Your username is {username} and temporary password is {####}. Please change it.",
            "EmailSubject" : {"Fn::Sub":"${GameName} invite!"}
          },
          "UnusedAccountValidityDays" : 7
        }
      }
    },

    "UserPoolDomain":{
      "Type":"AWS::Cognito::UserPoolDomain",
      "Properties": {
         "UserPoolId": {"Ref": "CognitoUserPool"},
         "Domain": {"Fn::Sub":"${GameName}-auth"}
      }
   },

    "ApiGateway": {
      "Type": "AWS::Serverless::Api",
      "Properties": {
        "StageName": "Prod",
        "Cors": "'*'",
        "Auth": {
          "DefaultAuthorizer": "CognitoAuthorizer",
          "Authorizers": {
            "CognitoAuthorizer": {
              "UserPoolArn": {"Fn::GetAtt": ["CognitoUserPool", "Arn"]}
            }
          }
        }
      }
    },

    "MetaSessionWizard": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "Serverless::Serverless.Wizards::MetaSessionWizard",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": {"Fn::GetAtt": ["MetaLambdaAccessIAMRole", "Arn"]},
        "Events": {
          "Connect": {
            "Type": "Api",
            "Properties": {
              "Path": "/connect", 
              "Method": "GET",
              "RestApiId": {"Ref": "ApiGateway"}
            }
          }
        },
        "Environment": {
          "Variables": {
            "SessionsTable": {"Ref": "SessionsTable"}
          }
        }
      }
    },

    "SessionsTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "TableName": {"Fn::Sub": "${GameName}-sessions-table"},
        "AttributeDefinitions" : [
          {"AttributeName" : "PlayerId", "AttributeType" : "S"}
        ],
        "KeySchema" : [
          {"AttributeName" : "PlayerId", "KeyType" : "HASH"}
        ],
        "BillingMode" : "PAY_PER_REQUEST"
      }
    },

    "MetaServerBuild": {
      "Condition": "DeployGameServersCond",
      "Type": "AWS::GameLift::Build",
      "Properties": {
        "Name": {"Fn::Sub": "${GameName}-meta-server-build-${GameServerVersion}"},
        "Version": {"Ref": "GameServerVersion"},
        "OperatingSystem": "AMAZON_LINUX_2",
        "StorageLocation": {
          "Bucket": {"Ref": "S3GameServerBucket"},
          "Key": {"Fn::Sub":"meta_server_build_${GameServerVersion}.zip"},
          "RoleArn": {"Fn::GetAtt": ["BuildIAMRole", "Arn"]}
        }
      }
    },

    "MetaServerQueue": {
      "Condition": "DeployGameServersCond",
      "Type": "AWS::GameLift::GameSessionQueue",
      "Properties": {
        "Name": {"Fn::Sub": "${GameName}-meta-server-queue"},
        "TimeoutInSeconds": 15,
        "Destinations": [{
          "DestinationArn": {
            "Fn::Sub": ["arn:aws:gamelift:${AWS::Region}:${AWS::AccountId}:alias/${AliasId}", {"AliasId": {"Ref": "MetaServerFleetAlias"}}]}
          }]
      }
    },

    "MetaServerFleetAlias": {
      "Condition": "DeployGameServersCond",
      "Type": "AWS::GameLift::Alias",
      "Properties": {
        "Name": "MetaServerFleetAlias",
        "RoutingStrategy": {"Type": "SIMPLE", "FleetId": {"Ref": "MetaServerFleet"}}
      }
    },

    "MetaServerFleet": {
      "Condition": "DeployGameServersCond",
      "Type": "AWS::GameLift::Fleet",
      "Properties": {
        "Name": {"Fn::Sub": "${GameName}-meta-server-fleet"},
        "BuildId": {"Ref": "MetaServerBuild"},
        "CertificateConfiguration": {"CertificateType": "GENERATED"},
        "MinSize": 1,
        "MaxSize": 10,
        "EC2InboundPermissions": [
        {
            "FromPort": 30000,
            "ToPort": 40000,
            "IpRange": "0.0.0.0/0",
            "Protocol": "TCP"
        }],
        "EC2InstanceType": "c5.large",
        "FleetType": "ON_DEMAND",
        "LogPaths": ["/local/game/journal.log"],
        "NewGameSessionProtectionPolicy": "FullProtection",
        "ResourceCreationLimitPolicy": {
          "NewGameSessionsPerCreator": 3,
          "PolicyPeriodInMinutes": 1
        },
        "RuntimeConfiguration": {
          "GameSessionActivationTimeoutSeconds": 10,
          "MaxConcurrentGameSessionActivations": 1,
          "ServerProcesses": [
          {
            "ConcurrentExecutions": 1,
            "LaunchPath": "/local/game/MetaServer"
          }]
        },
        "MetricGroups" : [{"Fn::Sub": "${GameName}_meta-server-fleet"}]
      }
    },

    "MetaServerMatchmaker": {
      "Type" : "AWS::GameLift::MatchmakingConfiguration",
      "Properties" : {
        "AcceptanceRequired" : false,
        "BackfillMode" : "AUTOMATIC",
        "FlexMatchMode" : "WITH_QUEUE",
        "GameSessionQueueArns" : [{"Fn::GetAtt": ["MetaServerQueue", "Arn"]}],
        "Name" : "MetaServerMatchmaker",
        "RequestTimeoutSeconds" : 30,
        "RuleSetName" : "MetaServerMatchmakerRuleSet"
      }
    },

    "MetaServerMatchmakerRuleSet": {
      "Type" : "AWS::GameLift::MatchmakingRuleSet",
      "Properties" : {
        "Name" : "MetaServerMatchmakerRuleSet",
        "RuleSetBody" : "{\"name\": \"free-for-all\", \"ruleLanguageVersion\": \"1.0\", \"playerAttributes\":[{ \"name\": \"dummy\",\"type\": \"number\", \"default\": 0}],\"algorithm\": {\"balancedAttribute\": \"dummy\",\"strategy\": \"balanced\",\"batchingPreference\": \"largestPopulation\"},\"teams\": [{\"name\": \"players\",\"maxPlayers\": 200,\"minPlayers\": 1}]}"
      }
    },

    "BuildIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
                "Service": [
                    "cloudformation.amazonaws.com",
                    "gamelift.amazonaws.com"
                ]
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "RoleName": "iam-build-access-role",
        "Policies": [
        {
          "PolicyName": "gamelift-s3-access-policy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                  "s3:GetObject",
                  "s3:GetObjectVersion",
                  "s3:GetObjectMetadata",
                  "s3:*Object*"
              ],
              "Resource":  [{"Fn::Sub": "arn:aws:s3:::${S3GameServerBucket}/*"}]
            }]
          }
        }]
      }
    },

    "MetaLambdaAccessIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "lambda.amazonaws.com",
                "edgelambda.amazonaws.com"
              ]
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "RoleName": "meta-lambda-access-IAMRole",
        "Policies": [{
          "PolicyName": "meta-lambda-access-policy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "gamelift:*",
              "Resource": "*"
            }]
          }
        }]
      }
    }
  },

  "Outputs": {
    
    "ClientCanConnectOn": {
      "Description": "API endpoint URL for start session placement",
      "Value": {"Fn::Sub": "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/connect"}
    },

    "UserPoolId": {
      "Description": "User pool id",
      "Value": {"Ref": "CognitoUserPool"}
    },

    "UserPoolClientId": {
      "Description": "User pool client",
      "Value": {"Ref": "UserPoolClient"}
    },

    "IdentityPoolId": {
      "Description": "Identity pool id",
      "Value": {"Ref": "IdentityPool"}
    }
  }
}